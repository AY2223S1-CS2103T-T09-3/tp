@startuml
!include style.puml

actor  user     as user

box Ui UI_COLOR_T1
participant ":CommandBox"  as commandBox UI_COLOR
participant ":ResultDisplay" as resultDisplay UI_COLOR
end box

box Logic LOGIC_COLOR_T1
participant ":logicManager"  as logicManager LOGIC_COLOR
participant ":addressBookParser"  as addressBookParser LOGIC_COLOR
participant ":MarkCommandParser"  as markCommandParser LOGIC_COLOR
participant ":MarkCommand"  as markCommand LOGIC_COLOR
participant ":CommandResult" as commandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":modelManager" as modelManager MODEL_COLOR
participant ":addressBook" as addressBook MODEL_COLOR
end box

user -> commandBox : input mark 1
activate commandBox

commandBox -> logicManager : execute "mark 1"
activate logicManager
deactivate commandBox

logicManager -> addressBookParser : parseCommand("mark 1")
activate addressBookParser

create markCommandParser
addressBookParser -> markCommandParser : new()
activate markCommandParser

markCommandParser --> addressBookParser

addressBookParser -> markCommandParser : parse("1")

create markCommand
markCommandParser -> markCommand
activate markCommand

markCommand --> markCommandParser
deactivate markCommand

markCommandParser --> addressBookParser
deactivate markCommandParser

addressBookParser --> logicManager
deactivate addressBookParser

logicManager -> markCommand : execute()
activate markCommand
deactivate logicManager

markCommand -> modelManager : markTask(1)
activate modelManager

modelManager -> addressBook : markTask(1)
activate addressBook

addressBook --> modelManager

autoActivate on
modelManager -> modelManager :updateFilteredTaskList(Predicate)
return

modelManager --> markCommand

create commandResult
markCommand -> commandResult : new()
activate commandResult

commandResult --> markCommand
deactivate commandResult

markCommand --> resultDisplay
activate resultDisplay

resultDisplay --> user : Task 1 marked successfully

@enduml
